#version 330 core
out vec4 FragColor;

in vec3 normal;
in vec3 color;
in vec3 FragPos;
in vec2 TexCoord;
uniform vec3 lightPos;
uniform vec3 viewPos;

uniform sampler2D texture1;

void main()
{
	float distance = length(lightPos - FragPos);
	float koef = 1.0; //1.0 / (1.00 + 0.009*distance + 0.0032*distance*distance);
	vec3 color2 = texture(texture1, TexCoord).rgb;
	float sum = color[0] + color[1] + color[2];
	if (sum > 0.01) color2 = color;
	vec3 ambient = 0.05 * color2;
	
    	vec3 lightDir = normalize(lightPos - FragPos);
    	vec3 norm = normalize(normal);
    	float diff = max(dot(lightDir, normal), 0.0);
    	vec3 diffuse = diff * koef * color2;
    	
    	vec3 viewDir = normalize(viewPos - FragPos);
    	vec3 reflectDir = reflect(-lightDir, normal);
    	float spec = 0.0;

    	vec3 halfwayDir = normalize(lightDir + viewDir);  
    	spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
    	vec3 specular = vec3(0.3) * spec * koef * color2;
	FragColor = vec4(ambient + diffuse + specular, 1.0);

 	//FragColor = vec4(ambient + diffuse, 1.0);
}